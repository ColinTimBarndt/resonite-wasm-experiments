using ProtoFlux.Core;
using ProtoFlux.Runtimes.Execution;

namespace Plugin.Wasm.ProtoFlux;

/// <summary>
/// Retrieves the type and name of a WebAssembly module's export by index.
/// </summary>
[NodeCategory("Web Assembly")]
[NodeName("Get Export", false)]
public sealed class GetExport : VoidNode<ExecutionContext>
{
    // Inputs

    /// <summary>The module asset where the export should be looked up from.</summary>
    public ObjectArgument<WebAssemblyModule?> Module;

    /// <summary>The index of the export.</summary>
    public ValueArgument<int> Index;

    // Outputs

#pragma warning disable CS8618 // Initializer generated by FluxWeaver

    /// <summary>The name of the export.</summary>
    public readonly ObjectOutput<string> Name;

    /// <summary>The type of the export.</summary>
    public readonly ValueOutput<WebAssemblyExportType> Type;

#pragma warning restore CS8618

    /// <inheritdoc/>
    protected override void ComputeOutputs(ExecutionContext context)
    {
        var module = Module.ReadObject(context)?.WasmModule;
        if (module is null) return;
        var index = Index.ReadValue(context);
        if (index < 0 || index >= module.Exports.Count) return;
        var export = module.Exports[index];
        Name.Write(export.Name, context);
        Type.Write(export switch
        {
            Wasmtime.TableExport => WebAssemblyExportType.Table,
            Wasmtime.GlobalExport => WebAssemblyExportType.Global,
            Wasmtime.MemoryExport => WebAssemblyExportType.Memory,
            Wasmtime.FunctionExport => WebAssemblyExportType.Function,
            _ => (WebAssemblyExportType)(-1),
        }, context);
    }
}