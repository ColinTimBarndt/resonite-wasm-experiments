using System;
using System.IO;
using System.Threading.Tasks;
using Elements.Core;
using FrooxEngine.ProtoFlux;
using FrooxEngine.Store;
using ProtoFlux.Core;
using ProtoFlux.Runtimes.Execution;

namespace Plugin.Wasm.ProtoFlux;

/// <summary>
/// This ProtoFlux node is used to import a WebAssembly
/// binary file from the local file system into the game as an asset.
/// </summary>
[NodeCategory("Web Assembly")]
[NodeName("Load File", false)]
public sealed class LoadFile : AsyncActionNode<FrooxEngineContext>
{
    // Inputs

    /// <summary>The file path of the WebAssembly module binary.</summary>
    public ObjectInput<string?> WasmFile;

    // Outputs

#pragma warning disable CS8618 // Initializer generated by FluxWeaver

    /// <summary>The database URL of the imported asset as a local resource.</summary>
    public readonly ObjectOutput<Uri?> ModuleAsset;

    /// <summary>Fired on a successful import, ModuleAsset has been set.</summary>
    public Continuation OnLoaded;

    /// <summary>Fired on a failed import.</summary>
    public Continuation OnFailed;

#pragma warning restore CS8618

    /// <inheritdoc/>
    protected override async Task<IOperation> RunAsync(FrooxEngineContext context)
    {
        var file = WasmFile.Evaluate(context);

        if (file is null || Path.GetExtension(file) != ".wasm") return OnFailed.Target;

        try
        {
            var url = await context.Engine.LocalDB.ImportLocalAssetAsync(file, LocalDB.ImportLocation.Copy).ConfigureAwait(continueOnCapturedContext: false);

            ModuleAsset.Write(url, context);

            return OnLoaded.Target;
        }
        catch (Exception error)
        {
            UniLog.Error(error.Message);
            return OnFailed.Target;
        }
    }
}