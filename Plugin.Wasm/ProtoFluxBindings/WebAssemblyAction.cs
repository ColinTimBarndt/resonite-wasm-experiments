using ProtoFlux.Core;
using FrooxEngine.ProtoFlux;
using ProtoFlux.Runtimes.Execution;
using FrooxEngine;
using Plugin.Wasm.ProtoFlux.NodeCompiler;
using System;

namespace Plugin.Wasm.ProtoFluxBindings;

using ActionNode = Plugin.Wasm.ProtoFlux.WebAssemblyAction;

/// <summary>
/// FrooxEngine bindings for the corresponding WebAssembly Action ProtoFlux node.
/// </summary>
public sealed class WebAssemblyAction : BaseWebAssemblyNode<ExecutionContext, ActionNode>, ISyncNodeOperation, INodeOperation
{
    /// <inheritdoc/>
    public override string NodeName => FunctionName ?? "Action";

    /// <inheritdoc/>
    protected override Type GetWasmNodeType(FunctionSignature signature)
        => WasmNodeJIT.GetActionType(signature);

    // ---- Action Flow Node ----

#pragma warning disable CS8766,CS8768,CS8600,CS8764 // Null checks are wrong here

    /// <inheritdoc/>
    public ISyncOperation? MappedOperation { get; set; }

    IOperation? INodeOperation.MappedOperation
    {
        get => MappedOperation;
        set => MappedOperation = (ISyncOperation)value;
    }

    /// <inheritdoc/>
    public override int NodeOperationCount => base.NodeOperationCount + 1;

    /// <inheritdoc/>
    protected override INodeOperation? GetOperationInternal(ref int index)
    {
        INodeOperation? operationInternal = base.GetOperationInternal(ref index);
        if (operationInternal is not null) return operationInternal;
        if (index == 0) return this;
        index--;
        return null;
    }

    /// <inheritdoc/>
    public override int NodeImpulseCount => base.NodeImpulseCount + 1;

    /// <inheritdoc/>
    protected override ISyncRef? GetImpulseInternal(ref int index)
    {
        ISyncRef? impulseInternal = base.GetImpulseInternal(ref index);
        if (impulseInternal is not null) return impulseInternal;
        if (index == 0) return Next;
        index--;
        return null;
    }

#pragma warning restore CS8766, CS8768, CS8600, CS8764

#pragma warning disable CS8618 // Initializer generated by Resonite

    /// <summary>If the function could be executed, this operation is executed next.</summary>
    public readonly SyncRef<INodeOperation> Next;

#pragma warning restore CS8618
}
